#### Database Roles

##### Service Role

The service role is created at the same time as the service instance. The name
of the database role matches the value of the **db_username** parameter given
to `cf create-service`. This role is granted ownership of the service instance
database and the `public` schema. The service role is identified by the
**service_role** key of the binding credentials object.

<p class="note"><strong>Note</strong>: The service role has the
<code>NOLOGIN</code> attribute, therefore it can not be used directly to connect
to the service instance database. The binding role should be used to connect to
the database.
</p>

##### Binding Role

A binding role is created for each service binding. This ensures each binding
or service key is a unique set of credentials. It is granted the service
role and inherits the service role's privileges. The binding role is identified
by the **username** key of the binding credentials object.

##### Database Object Ownership

A database object is owned by the role that creates it. Database objects may
only be altered or dropped by the owner or a role granted the owner's role.

The binding role will own any database objects it creates. Privileges for these
objects are granted to the service role. This allows subsequent binding roles to
access an object with the same privileges as the binding role that created
the object.

When a binding is destroyed, object ownership is transferred from the binding
role to the service role. This allows subsequent binding roles to alter or drop
database objects created by previous binding roles.

Services with multiple active bindings that create database objects may have
objects owned by multiple roles. In this scenario, an attempt to alter or drop
an object that is not owned by the current binding role or the service role
may fail with an error similar to:

```
ERROR:  must be owner of ...
```

Therefore, it is recommended to create database objects as the service role
instead of the binding role. This can be accomplished by using the `SET ROLE`
command. For example:

```
SET ROLE <service_role>; CREATE TABLE t (id SERIAL, text TEXT);
```

If this is not possible, `SET ROLE` may be used when an object needs to be
altered or dropped:

```
SET ROLE <service_role>; ALTER TABLE t ADD COLUMN moretext TEXT;
```

#### Accessing the Primary Database Server

To access the primary database server, which should be used for database write
operations, use the `db_host` and `db_port` keys to construct a connection
string. The `uri` and `jdbc_uri` may also be used to connect to the primary
database server when supported by the client application or library.
For further information, please see [Selectively Accessing Clusters](feature-overview.html#ports)

#### Accessing the Replica Database Server(s)

To access the replica database server(s), which should be used for database
read operations, use the `read_host` and `read_port` keys to construct a
connection string. The `read_uri` and `jdbc_read_uri` may also be used to
connect to the replica database server(s) when supported by the client
application or library.
For further information, please see [Selectively Accessing Clusters](feature-overview.html#ports)
