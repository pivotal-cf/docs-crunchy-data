---
title: Security and Compliance
owner: Crunchy Data
---

##<a id='cc'></a> Common Criteria Certification

Certified Crunchy PostgreSQL is the first open source relational database to be certified at Common Criteria EAL 2+.

[Press Release](https://www.postgresql.org/about/news/1685/).

##<a id='stig'></a> DISA Security Technical Implementation

Security Technical Implementation Guides (STIGs) are the configuration standards for United States Department of Defense (DoD) Information Assurance (IA) and IA-enabled devices/systems published by the United States Defense Information Systems Agency (DISA).
Since 1998, DISA has played a critical role enhancing the security posture of DoD's security systems by providing the STIGs.
The STIGs contain technical guidance to “lock down” information systems/software that might otherwise be vulnerable to a malicious computer attack.

Importantly, compliance with the STIG guidance requires only open source software and documentation.
The PostgreSQL STIG is based on open source, unmodified PostgreSQL 9.x used in conjunction with certain open source PostgreSQL extensions – most notably, pgaudit.

[Announcing the PostgreSQL STIG](http://info.crunchydata.com/blog/postgres-stig-disa-security-guide)

###<a id='intro'></a> DISA PostgreSQL STIG Automation

Developed to reduce the time it takes to secure authority to operate certification for cloud services, the technology leverages open source software to provide automated compliance testing.
In this case, the compliance testing and subsequent review and approval was accomplished within 72 hours, which is a major reduction in effort compared to previous attempts.
The PostgreSQL STIG Automation project utilizes the [InSpec Project](https://www.inspec.io/), which provides an open source compliance, security and policy testing framework, to dynamically extract system configuration information.
This information is checked against strict security DoD guidelines crafted by industry-leading PostgreSQL security experts.
The PostgreSQL STIG Automation project also electronically supplements the Body of Evidence required to verify NIST 800-53 and the government’s compliance requirements.

[Crunchy Data Automates Security Compliance with DISA PostgreSQL Security Technical Implementation Guide](http://info.crunchydata.com/news/crunchy-data-automates-security-compliance-with-disa-security-technical-implementation-guide)

###<a id='overview'></a> Automation Process Overview

<img src='https://i.imgur.com/jOe9vQ8.png' />

1. DISA STIG loaded and saved as `*.ckl` file
2. Tools are used to convert STIG Viewer's `*.ckl` file into an InSpec tests collection
3. Each STIG test case is transferred into either a Base Profile or an Overlay
4. Base Profile and Overlay tests are integrated into a BOSH Job and integrated with a Service Job
5. Once user creates an instance of the Crunchy Service, a STIG compliance job is automatically configured to scan that system
6. Full, basic, and ICS 500-27 Reports are automatically generated and are available for the security team (for each service)
7. Platform Administrator can use scripts to convert this report into a `*.ckl` (STIG Viewer) file for analysis (see below)

[Learn more about PostgreSQL STIG InSpec Base Profile](https://github.com/CrunchyData/pgstigcheck-inspec)

###<a id='sitg_vw'></a> Using DISA STIG Viewer

Once a Compliance Report is generated, tools can be used to convert it into a `*.ckl` (Checklist) format.
At this point, a System Compliance Assessor can use STIG Viewer to verify results of every automated test.
Results of each test are appended to the Finding Details field.

<img src='https://i.imgur.com/j8cbLRq.png' />

##<a id='ics_500'></a> ICS 500-27 Audit with Crunchy pgAudit

Crunchy’s pgAudit configuration enhances PostgreSQL's logging abilities by allowing administrators to audit specific classes of operations or choosing specific objects to monitor and provides detailed session and/or object audit logging.

Session auditing allows administrators to choose classes of statements to log:

- `READ`: `SELECT` and `COPY` when the source is a relation or a query
- `WRITE`: `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY` when the destination is a relation
- `FUNCTION`: Functions and `DO` blocks
- `ROLE`: `GRANT`, `REVOKE`, `CREATE/ALTER/DROP ROLE`
- `DDL`: All `DDL` not included in `ROLE`
- `MISC`: `DISCARD`, `FETCH`, `CHECKPOINT`, `VACUUM`

For example:

```
2017-07-14 13:42:00.976 UTC psql crunchy stig_test_db 5968ca28.230f 2017-07-14 13:42:00 UTC localhost(41390) 8975 >LOG:  AUDIT: SESSION,1,1,ROLE,CREATE ROLE,,,CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);,<none>
AUDIT: SESSION,1,1,ROLE,CREATE ROLE,,,CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);,<none>
```

###<a id='inherited-controls'></a> ICS 500-27 Controls Inheritance
[View All Inherited ICS 500-27 Controls](ics500_27_controls.html)

###<a id='Audit-Statement-Anatomy'></a> ICS 500-27 Audit Statement Anatomy

```
AUDIT: SESSION,1,1,ROLE,CREATE ROLE,,,CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);,<none>
```

- `AUDIT_TYPE` - `SESSION` or `OBJECT`.
- `STATEMENT_ID` - Unique statement ID for this session. Each statement ID represents a backend call. Statement IDs are sequential even if some statements are not logged. There may be multiple entries for a statement ID when more than one relation is logged.
- `SUBSTATEMENT_ID` - Sequential ID for each sub-statement within the main statement. For example, calling a function from a query. Sub-statement IDs are continuous even if some sub-statements are not logged. There may be multiple entries for a sub-statement ID when more than one relation is logged.
- `CLASS` - e.g. `READ`, `ROLE` (see `pgaudit.log`).
- `COMMAND` - e.g. `ALTER TABLE`, `SELECT.OBJECT_TYPE - TABLE, INDEX, VIEW`, etc. Available for `SELECT`, `DML` and most `DDL` statements.
- `OBJECT_NAME` - The fully-qualified object name (e.g. `public.account`). Available for `SELECT`, `DML` and most `DDL` statements.
- `STATEMENT` - Statement executed on the backend.
- `PARAMETER` - If `pgaudit.log_parameter` is set then this field will contain the statement parameters as quoted CSV.

###<a id='Auditable-Event-Prefix-Anatomy'></a> Auditable Event Prefix Anatomy

```
2017-07-14 13:42:00.976 UTC psql crunchy stig_test_db 5968ca28.230f 2017-07-14 13:42:00 UTC localhost(41390) 8975 >LOG:  AUDIT: SESSION,1,1,ROLE,CREATE ROLE,,,CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);,<none>
2017-07-14 13:42:00.976 UTC psql crunchy stig_test_db 5968ca28.230f 2017-07-14 13:42:00 UTC localhost(41390) 8975 >
```

```
%m %a %u %d %p %c %s %r

 %m Time stamp with milliseconds
 %u User name
 %d Database name
 %p Process ID
 %s Process start time stamp
 %r Remote host name or IP address, and remote port
```

###<a id='compliance-profiles'></a> Compliance Profiles
<%= partial 'compliance_profiles' -%>
